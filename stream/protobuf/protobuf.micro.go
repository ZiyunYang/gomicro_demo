// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: protobuf.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LogGather service

type LogGatherService interface {
	LogFileStream(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (LogGather_LogFileStreamService, error)
}

type logGatherService struct {
	c    client.Client
	name string
}

func NewLogGatherService(name string, c client.Client) LogGatherService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "loggather"
	}
	return &logGatherService{
		c:    c,
		name: name,
	}
}

func (c *logGatherService) LogFileStream(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (LogGather_LogFileStreamService, error) {
	req := c.c.NewRequest(c.name, "LogGather.LogFileStream", &DownloadRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &logGatherServiceLogFileStream{stream}, nil
}

type LogGather_LogFileStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*DownloadResponse, error)
}

type logGatherServiceLogFileStream struct {
	stream client.Stream
}

func (x *logGatherServiceLogFileStream) Close() error {
	return x.stream.Close()
}

func (x *logGatherServiceLogFileStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *logGatherServiceLogFileStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *logGatherServiceLogFileStream) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for LogGather service

type LogGatherHandler interface {
	LogFileStream(context.Context, *DownloadRequest, LogGather_LogFileStreamStream) error
}

func RegisterLogGatherHandler(s server.Server, hdlr LogGatherHandler, opts ...server.HandlerOption) error {
	type logGather interface {
		LogFileStream(ctx context.Context, stream server.Stream) error
	}
	type LogGather struct {
		logGather
	}
	h := &logGatherHandler{hdlr}
	return s.Handle(s.NewHandler(&LogGather{h}, opts...))
}

type logGatherHandler struct {
	LogGatherHandler
}

func (h *logGatherHandler) LogFileStream(ctx context.Context, stream server.Stream) error {
	m := new(DownloadRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.LogGatherHandler.LogFileStream(ctx, m, &logGatherLogFileStreamStream{stream})
}

type LogGather_LogFileStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*DownloadResponse) error
}

type logGatherLogFileStreamStream struct {
	stream server.Stream
}

func (x *logGatherLogFileStreamStream) Close() error {
	return x.stream.Close()
}

func (x *logGatherLogFileStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *logGatherLogFileStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *logGatherLogFileStreamStream) Send(m *DownloadResponse) error {
	return x.stream.Send(m)
}
